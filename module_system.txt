=====================================モジュールシステムに求められるモデル=====================================ところで「Java/VM環境で完全なモジュールシステムが実現できる」とはどういう事でしょうか？Java/VM環境で構築されたシステムを言語構造の視点からレイヤに分割してみると、次のようになります。システム > アプリケーション > クラスやインタフェース > メソッド > 命令Javaはオブジェクト指向な言語なので、クラスがあり、メソッドがあり、1行1行VMに対する命令を書く言語です。オブジェクト指向言語なので、カプセル化を駆使して実装を隠蔽し、再利用できる…、と思われて広く使われるようになりましたが、再利用ってうまくやれますか？例えばクラスの再利用を考えると、そのクラスに関連するクラスを一通り分離して、JARにするのではないでしょうか？システム > アプリケーション > JAR > クラスやインタフェース > メソッド > 命令しかし、実はJARはコンポーネントとして扱うには不完全なのです。JARがコンポーネントとして不完全なのは、下記の2点の理由があるからです。 * あるJARを利用しようとした時、そのJARの中のクラスを実行するときに必要としている他のJARに関する情報の記述がいまいちであること、つまり依存関係の記述がいまいち * JARをJava/VM環境にロードしたとき、気づかないうちに意図していないインスタンス同士が関連していること、つまりアクセス境界がいまいちである事、に起因します。OSGiのチュートリアルを読むつもりだったのに、なんかまどろっこしいな…と思われた方。実はこの辺りがハマりどころであるため、解説する大事なところなんです。それぞれ見てみましょう。JARの依存関係===============MavenやIvyは便利ですよね。使いたいJARを宣言すれば、自動的に依存しているJARを取得できます。依存しているJARを取得するためには、どこかに依存情報がなければなりません。しかし、これらのツールはJARの内部に依存関係を持たせていません。またJARの作成時に必ず作成されるMANIFEST.MFですが、Class-Pathと宣言することで依存するJARの情報を記述できます。しかし残念な事にファイル名ベースなのです。例えば少しJARのバージョンが更新され、ファイル名が変更されればそれだけで利用できません。情報としてもろいのです。よって、依存関係の記述がいまいちなのです。JARのアクセス境界==================ある程度の大きさのWebアプリケーションでは、クラスパスに並ぶライブラリが20とか30とかになり、Eclipseのパッケージビューがライブラリだらけ、みたいになっている事は結構あると思います。こういう状態の時に、あるJARに脆弱性が発見されたので、新しいJARに入れ替えたらシステムが起動しなくなった。調べてみると、そのJARを利用している別のJARも入れ替えないといけないらしい。そっちを入れ替えると他のJARも入れ替えないといけないみたいだ…。でもそれを入れ替えると、アプリケーションから利用していたメソッドがなくなっているみたいだ…。なんて事をたまに聞いたりしませんか？この事をJAR Hellと名付けられていたりします。なぜこれが起きるかと言うと、同じクラスローダ上に展開されたクラスは、JARによる物理的な壁を超え、publicやprotectedなどの識別子、論理的な壁でアクセス境界が定められているためです。ライブラリとして実装しているJARの開発時に困るのが、JARの中のクラスしか参照させたくないクラスであっても、ライブラリ内の他のパッケージに公開したいのでpublicで宣言する必要が出てきた時。そういうとき、JavaDocでライブラリ内にのみ公開と明記しても…。実装者は不安ですよね。ライブラリを利用するユーザも不安です。つまり、アクセス境界がいまいちなのです。ところでアクセス境界のいまいちさは、アプリケーション内においてインタフェースの宣言は不要にも結びついているように思えます。結局アプリケーション開発時にはインタフェースが参照できてしまうからです。アクセス境界がはっきりしている世界ではインタフェースがより重要な役割を持つようになります。なぜならば、完全に実装クラスをモジュール外に非公開にすることが可能になるため、上記のような事態はなくなります。よりカプセル化が促進するのです。OSGiによるモジュールシステムは、JARのみを使ったモジュールシステムが持つこれらの問題を解決する事ができます。そもそもOSGiは簡単に機能を切り離せる事が要件にあるため、完全なモジュールシステムでなければならなかったのです。OSGiの仕様では、依存性に関する情報や、アクセス境界をJARの中にメタデータとして含める事が考えられました。それがOSGiのBundleです。OSGiのBundleは、JARの形式+メタデータのため、JARとして活用することもできます。OSGiがエンタープライズアプリケーションでの普及が考えられている最近では、リリースされるライブラリの中にメタデータを含んでいるものも増えています。そのため、実はただのJARと思っていたライブラリが、OSGiコンテナ上で利用できるBundleとして配布されているかもしれません。